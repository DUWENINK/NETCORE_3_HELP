// <auto-generated />
using System;
using DUWENINK.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DUWENINK.Core.Data.Migrations
{
    [DbContext(typeof(DUWENINKContext))]
    [Migration("20190901030712_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.AreaEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<int>("DisplaySequence");

                    b.Property<bool>("Enabled");

                    b.Property<string>("FullSpelling");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.Property<string>("ParentId");

                    b.Property<string>("PathCode");

                    b.Property<string>("SimpleSpelling");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.AreaOfferEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("A1OfferPrice");

                    b.Property<decimal>("A2OfferPrice");

                    b.Property<decimal>("A3OfferPrice");

                    b.Property<string>("AreaId");

                    b.Property<decimal>("B1OfferPrice");

                    b.Property<decimal>("B2OfferPrice");

                    b.Property<decimal>("C1OfferPrice");

                    b.Property<decimal>("C2OfferPrice");

                    b.Property<decimal>("C3OfferPrice");

                    b.Property<decimal>("C4OfferPrice");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<decimal>("DOfferPrice");

                    b.Property<decimal>("EOfferPrice");

                    b.Property<decimal>("FOfferPrice");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("MOfferPrice");

                    b.Property<decimal>("NOfferPrice");

                    b.Property<decimal>("POfferPrice");

                    b.HasKey("Id");

                    b.ToTable("AreaOffers");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.DepartmentEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("ParentId");

                    b.Property<string>("PathCode");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.DriverLicenseOfferEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AcquisitionTime");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("DriverLicenseType");

                    b.Property<string>("GoalAddress");

                    b.Property<string>("GoalAreaId");

                    b.Property<decimal>("GoalTotalPrice");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("ScoreLeft");

                    b.Property<byte>("Sex");

                    b.Property<string>("SourceAreaId");

                    b.Property<decimal>("SourceTotalPrice");

                    b.Property<string>("WeiXinId");

                    b.HasKey("Id");

                    b.ToTable("DriverLicenseOffers");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.FileCollectionEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CpuId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<byte[]>("ImageFileStream");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UserFilePath");

                    b.HasKey("Id");

                    b.ToTable("FileCollections");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.JobEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<DateTime?>("DeliverTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSend");

                    b.Property<byte>("JobReciveType");

                    b.Property<string>("MessageContext");

                    b.Property<string>("ReviceAccount");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.LoginLogEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("IP");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LoginName");

                    b.Property<string>("Message");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("LoginLogs");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.MenuEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("ParentId");

                    b.Property<string>("PathCode");

                    b.Property<byte>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.MessageEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contents");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ReadedNumber");

                    b.Property<string>("Title");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.MessageReceiverEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReaded");

                    b.Property<string>("MessageId");

                    b.Property<DateTime?>("ReadDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageReceivers");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.PageViewEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("IP");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LoginName");

                    b.Property<string>("Url");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("PageViews");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.PathCodeEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Len");

                    b.HasKey("Id");

                    b.ToTable("PathCodes");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.ProjectEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChargePersonId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("FromCustomQQ");

                    b.Property<string>("FromCustomServiceQQ");

                    b.Property<string>("FromCustomWangWang");

                    b.Property<string>("FromQQGroup");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OrderNumber");

                    b.Property<decimal>("ProjectAgreementWorth");

                    b.Property<DateTime?>("ProjectEndTime");

                    b.Property<string>("ProjectPath");

                    b.Property<string>("ProjectQQGroup");

                    b.Property<DateTime?>("ProjectServiceEndTime");

                    b.Property<DateTime?>("ProjectStartTime");

                    b.Property<int>("ProjectStatus");

                    b.Property<string>("ProjectTitle");

                    b.Property<int>("ProjectType");

                    b.Property<decimal>("ProjectWorth");

                    b.Property<string>("RefundNumber");

                    b.Property<decimal>("RefundWorth");

                    b.Property<string>("Remarks");

                    b.Property<string>("ServicePersonId");

                    b.Property<int>("SettleInterval");

                    b.Property<DateTime?>("SettleTime");

                    b.HasKey("Id");

                    b.HasIndex("ChargePersonId");

                    b.HasIndex("ServicePersonId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.RoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.RoleMenuEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MenuId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMenus");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.STSEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("FromGroup");

                    b.Property<string>("FromQQ");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Message");

                    b.Property<string>("ToQQ");

                    b.HasKey("Id");

                    b.ToTable("STSs");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.SiteViewEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<DateTime>("Day");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.ToTable("SiteViews");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.SmtpEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("FromUserMail");

                    b.Property<string>("FromUserName");

                    b.Property<string>("Host");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PassWord");

                    b.Property<int>("Port");

                    b.Property<string>("Remark");

                    b.Property<bool>("UseDefaultCredentials");

                    b.HasKey("Id");

                    b.ToTable("Smtps");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.SystemConfigEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<DateTime>("DataInitedDate");

                    b.Property<bool>("IsDataInited");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SystemName");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigs");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<string>("DepartmentId");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSuperMan");

                    b.Property<string>("LoginName");

                    b.Property<string>("Password");

                    b.Property<string>("RealName");

                    b.Property<string>("UserQq");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.UserRoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.VaeEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("ContentId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUserId");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Vaes");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.MessageReceiverEntity", b =>
                {
                    b.HasOne("DUWENINK.Core.Data.Entity.MessageEntity", "Message")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("MessageId");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.ProjectEntity", b =>
                {
                    b.HasOne("DUWENINK.Core.Data.Entity.UserEntity", "ChargePerson")
                        .WithMany()
                        .HasForeignKey("ChargePersonId");

                    b.HasOne("DUWENINK.Core.Data.Entity.UserEntity", "ServicePerson")
                        .WithMany()
                        .HasForeignKey("ServicePersonId");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.RoleMenuEntity", b =>
                {
                    b.HasOne("DUWENINK.Core.Data.Entity.MenuEntity", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId");

                    b.HasOne("DUWENINK.Core.Data.Entity.RoleEntity", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.UserEntity", b =>
                {
                    b.HasOne("DUWENINK.Core.Data.Entity.DepartmentEntity", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("DUWENINK.Core.Data.Entity.UserRoleEntity", b =>
                {
                    b.HasOne("DUWENINK.Core.Data.Entity.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("DUWENINK.Core.Data.Entity.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
